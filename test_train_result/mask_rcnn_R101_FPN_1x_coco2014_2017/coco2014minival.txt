Found Detectron ops lib: /home/wattanapongsu/anaconda2/envs/mask/lib/libcaffe2_detectron_ops_gpu.so
INFO test_net.py:  98: Called with args:
INFO test_net.py:  99: Namespace(cfg_file='configs/wattanapong/train_e2e_mask_rcnn_R-101-FPN_1x_coco2014_2017.yaml', multi_gpu_testing=True, opts=['TEST.WEIGHTS', '/tmp/detectron-output/train/coco_2014_train:coco_2014_valminusminival:coco_2017_train/generalized_rcnn/model_final.pkl', 'NUM_GPUS', '2'], range=None, vis=False, wait=True)
INFO test_net.py: 105: Testing with config:
INFO test_net.py: 106: {'BBOX_XFORM_CLIP': 4.135166556742356,
 'CLUSTER': {'ON_CLUSTER': False},
 'DATA_LOADER': {'BLOBS_QUEUE_CAPACITY': 8,
                 'MINIBATCH_QUEUE_SIZE': 64,
                 'NUM_THREADS': 4},
 'DEDUP_BOXES': 0.0625,
 'DOWNLOAD_CACHE': '/tmp/detectron-download-cache',
 'EPS': 1e-14,
 'EXPECTED_RESULTS': [],
 'EXPECTED_RESULTS_ATOL': 0.005,
 'EXPECTED_RESULTS_EMAIL': '',
 'EXPECTED_RESULTS_RTOL': 0.1,
 'FAST_RCNN': {'CONV_HEAD_DIM': 256,
               'MLP_HEAD_DIM': 1024,
               'NUM_STACKED_CONVS': 4,
               'ROI_BOX_HEAD': 'fast_rcnn_heads.add_roi_2mlp_head',
               'ROI_XFORM_METHOD': 'RoIAlign',
               'ROI_XFORM_RESOLUTION': 7,
               'ROI_XFORM_SAMPLING_RATIO': 2},
 'FPN': {'COARSEST_STRIDE': 32,
         'DIM': 256,
         'EXTRA_CONV_LEVELS': False,
         'FPN_ON': True,
         'MULTILEVEL_ROIS': True,
         'MULTILEVEL_RPN': True,
         'ROI_CANONICAL_LEVEL': 4,
         'ROI_CANONICAL_SCALE': 224,
         'ROI_MAX_LEVEL': 5,
         'ROI_MIN_LEVEL': 2,
         'RPN_ANCHOR_START_SIZE': 32,
         'RPN_ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_MAX_LEVEL': 6,
         'RPN_MIN_LEVEL': 2,
         'USE_GN': False,
         'ZERO_INIT_LATERAL': False},
 'GROUP_NORM': {'DIM_PER_GP': -1, 'EPSILON': 1e-05, 'NUM_GROUPS': 32},
 'KRCNN': {'CONV_HEAD_DIM': 256,
           'CONV_HEAD_KERNEL': 3,
           'CONV_INIT': 'GaussianFill',
           'DECONV_DIM': 256,
           'DECONV_KERNEL': 4,
           'DILATION': 1,
           'HEATMAP_SIZE': -1,
           'INFERENCE_MIN_SIZE': 0,
           'KEYPOINT_CONFIDENCE': 'bbox',
           'LOSS_WEIGHT': 1.0,
           'MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH': 20,
           'NMS_OKS': False,
           'NORMALIZE_BY_VISIBLE_KEYPOINTS': True,
           'NUM_KEYPOINTS': -1,
           'NUM_STACKED_CONVS': 8,
           'ROI_KEYPOINTS_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'UP_SCALE': -1,
           'USE_DECONV': False,
           'USE_DECONV_OUTPUT': False},
 'MATLAB': 'matlab',
 'MEMONGER': True,
 'MEMONGER_SHARE_ACTIVATIONS': False,
 'MODEL': {'BBOX_REG_WEIGHTS': (10.0, 10.0, 5.0, 5.0),
           'CLS_AGNOSTIC_BBOX_REG': False,
           'CONV_BODY': 'FPN.add_fpn_ResNet101_conv5_body',
           'EXECUTION_TYPE': 'dag',
           'FASTER_RCNN': True,
           'KEYPOINTS_ON': False,
           'MASK_ON': True,
           'NUM_CLASSES': 81,
           'RPN_ONLY': False,
           'TYPE': 'generalized_rcnn'},
 'MRCNN': {'CLS_SPECIFIC_MASK': True,
           'CONV_INIT': 'MSRAFill',
           'DILATION': 1,
           'DIM_REDUCED': 256,
           'RESOLUTION': 28,
           'ROI_MASK_HEAD': 'mask_rcnn_heads.mask_rcnn_fcn_head_v1up4convs',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 14,
           'ROI_XFORM_SAMPLING_RATIO': 2,
           'THRESH_BINARIZE': 0.5,
           'UPSAMPLE_RATIO': 1,
           'USE_FC_OUTPUT': False,
           'WEIGHT_LOSS_MASK': 1.0},
 'NUM_GPUS': 2,
 'OUTPUT_DIR': '.',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RESNETS': {'NUM_GROUPS': 1,
             'RES5_DILATION': 1,
             'SHORTCUT_FUNC': 'basic_bn_shortcut',
             'STEM_FUNC': 'basic_bn_stem',
             'STRIDE_1X1': True,
             'TRANS_FUNC': 'bottleneck_transformation',
             'WIDTH_PER_GROUP': 64},
 'RETINANET': {'ANCHOR_SCALE': 4,
               'ASPECT_RATIOS': (0.5, 1.0, 2.0),
               'BBOX_REG_BETA': 0.11,
               'BBOX_REG_WEIGHT': 1.0,
               'CLASS_SPECIFIC_BBOX': False,
               'INFERENCE_TH': 0.05,
               'LOSS_ALPHA': 0.25,
               'LOSS_GAMMA': 2.0,
               'NEGATIVE_OVERLAP': 0.4,
               'NUM_CONVS': 4,
               'POSITIVE_OVERLAP': 0.5,
               'PRE_NMS_TOP_N': 1000,
               'PRIOR_PROB': 0.01,
               'RETINANET_ON': False,
               'SCALES_PER_OCTAVE': 3,
               'SHARE_CLS_BBOX_TOWER': False,
               'SOFTMAX': False},
 'RFCN': {'PS_GRID_SIZE': 3},
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/wattanapongsu/library/detectron',
 'RPN': {'ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_ON': True,
         'SIZES': (64, 128, 256, 512),
         'STRIDE': 16},
 'SOLVER': {'BASE_LR': 0.001,
            'GAMMA': 0.1,
            'LOG_LR_CHANGE_THRESHOLD': 1.1,
            'LRS': [],
            'LR_POLICY': 'steps_with_decay',
            'MAX_ITER': 90000,
            'MOMENTUM': 0.9,
            'SCALE_MOMENTUM': True,
            'SCALE_MOMENTUM_THRESHOLD': 1.1,
            'STEPS': [0, 60000, 80000],
            'STEP_SIZE': 30000,
            'WARM_UP_FACTOR': 0.3333333333333333,
            'WARM_UP_ITERS': 500,
            'WARM_UP_METHOD': u'linear',
            'WEIGHT_DECAY': 0.0001,
            'WEIGHT_DECAY_GN': 0.0},
 'TEST': {'BBOX_AUG': {'AREA_TH_HI': 32400,
                       'AREA_TH_LO': 2500,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'COORD_HEUR': 'UNION',
                       'ENABLED': False,
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False,
                       'SCORE_HEUR': 'UNION'},
          'BBOX_REG': True,
          'BBOX_VOTE': {'ENABLED': False,
                        'SCORING_METHOD': 'ID',
                        'SCORING_METHOD_BETA': 1.0,
                        'VOTE_TH': 0.8},
          'COMPETITION_MODE': True,
          'DATASETS': ('coco_2014_minival',),
          'DETECTIONS_PER_IM': 100,
          'FORCE_JSON_DATASET_EVAL': False,
          'KPS_AUG': {'AREA_TH': 32400,
                      'ASPECT_RATIOS': (),
                      'ASPECT_RATIO_H_FLIP': False,
                      'ENABLED': False,
                      'HEUR': 'HM_AVG',
                      'H_FLIP': False,
                      'MAX_SIZE': 4000,
                      'SCALES': (),
                      'SCALE_H_FLIP': False,
                      'SCALE_SIZE_DEP': False},
          'MASK_AUG': {'AREA_TH': 32400,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'ENABLED': False,
                       'HEUR': 'SOFT_AVG',
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False},
          'MAX_SIZE': 1333,
          'NMS': 0.5,
          'PRECOMPUTED_PROPOSALS': False,
          'PROPOSAL_FILES': (),
          'PROPOSAL_LIMIT': 2000,
          'RPN_MIN_SIZE': 0,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 1000,
          'RPN_PRE_NMS_TOP_N': 1000,
          'SCALE': 800,
          'SCORE_THRESH': 0.05,
          'SOFT_NMS': {'ENABLED': False, 'METHOD': 'linear', 'SIGMA': 0.5},
          'WEIGHTS': '/tmp/detectron-output/train/coco_2014_train:coco_2014_valminusminival:coco_2017_train/generalized_rcnn/model_final.pkl'},
 'TRAIN': {'ASPECT_GROUPING': True,
           'AUTO_RESUME': True,
           'BATCH_SIZE_PER_IM': 128,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CROWD_FILTER_THRESH': 0.7,
           'DATASETS': ('coco_2014_train',
                        'coco_2014_valminusminival',
                        'coco_2017_train'),
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'FREEZE_AT': 2,
           'FREEZE_CONV_BODY': False,
           'GT_MIN_AREA': -1,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 1333,
           'PROPOSAL_FILES': (),
           'RPN_BATCH_SIZE_PER_IM': 256,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 2000,
           'RPN_STRADDLE_THRESH': 0,
           'SCALES': (800,),
           'SNAPSHOT_ITERS': 20000,
           'USE_FLIPPED': True,
           'WEIGHTS': u'/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-101.pkl'},
 'USE_NCCL': False,
 'VIS': False,
 'VIS_TH': 0.9}
output dir : ./test/coco_2014_minival/generalized_rcnn
loading annotations into memory...
Done (t=0.85s)
creating index...
index created!
INFO subprocess.py:  75: detection range command 0: /home/wattanapongsu/library/detectron/tools/test_net.py --range 0 2500 --cfg ./test/coco_2014_minival/generalized_rcnn/detection_range_config.yaml NUM_GPUS 1 TEST.DATASETS '("coco_2014_minival",)' TEST.WEIGHTS /tmp/detectron-output/train/coco_2014_train:coco_2014_valminusminival:coco_2017_train/generalized_rcnn/model_final.pkl
INFO subprocess.py:  75: detection range command 1: /home/wattanapongsu/library/detectron/tools/test_net.py --range 2500 5000 --cfg ./test/coco_2014_minival/generalized_rcnn/detection_range_config.yaml NUM_GPUS 1 TEST.DATASETS '("coco_2014_minival",)' TEST.WEIGHTS /tmp/detectron-output/train/coco_2014_train:coco_2014_valminusminival:coco_2017_train/generalized_rcnn/model_final.pkl
INFO subprocess.py: 115: # ---------------------------------------------------------------------------- #
INFO subprocess.py: 117: stdout of subprocess 0 with range [1, 2500]
INFO subprocess.py: 119: # ---------------------------------------------------------------------------- #
E0720 22:55:46.042884  8787 init_intrinsics_check.cc:43] CPU feature avx is present on your machine, but the Caffe2 binary is not compiled with it. It means you may not get the full speed of your CPU.
Found Detectron ops lib: /home/wattanapongsu/anaconda2/envs/mask/lib/libcaffe2_detectron_ops_gpu.so
INFO test_net.py:  98: Called with args:
INFO test_net.py:  99: Namespace(cfg_file='./test/coco_2014_minival/generalized_rcnn/detection_range_config.yaml', multi_gpu_testing=False, opts=['NUM_GPUS', '1', 'TEST.DATASETS', '("coco_2014_minival",)', 'TEST.WEIGHTS', '/tmp/detectron-output/train/coco_2014_train:coco_2014_valminusminival:coco_2017_train/generalized_rcnn/model_final.pkl'], range=[0, 2500], vis=False, wait=True)
INFO test_net.py: 105: Testing with config:
INFO test_net.py: 106: {'BBOX_XFORM_CLIP': 4.135166556742356,
 'CLUSTER': {'ON_CLUSTER': False},
 'DATA_LOADER': {'BLOBS_QUEUE_CAPACITY': 8,
                 'MINIBATCH_QUEUE_SIZE': 64,
                 'NUM_THREADS': 4},
 'DEDUP_BOXES': 0.0625,
 'DOWNLOAD_CACHE': '/tmp/detectron-download-cache',
 'EPS': 1e-14,
 'EXPECTED_RESULTS': [],
 'EXPECTED_RESULTS_ATOL': 0.005,
 'EXPECTED_RESULTS_EMAIL': '',
 'EXPECTED_RESULTS_RTOL': 0.1,
 'FAST_RCNN': {'CONV_HEAD_DIM': 256,
               'MLP_HEAD_DIM': 1024,
               'NUM_STACKED_CONVS': 4,
               'ROI_BOX_HEAD': 'fast_rcnn_heads.add_roi_2mlp_head',
               'ROI_XFORM_METHOD': 'RoIAlign',
               'ROI_XFORM_RESOLUTION': 7,
               'ROI_XFORM_SAMPLING_RATIO': 2},
 'FPN': {'COARSEST_STRIDE': 32,
         'DIM': 256,
         'EXTRA_CONV_LEVELS': False,
         'FPN_ON': True,
         'MULTILEVEL_ROIS': True,
         'MULTILEVEL_RPN': True,
         'ROI_CANONICAL_LEVEL': 4,
         'ROI_CANONICAL_SCALE': 224,
         'ROI_MAX_LEVEL': 5,
         'ROI_MIN_LEVEL': 2,
         'RPN_ANCHOR_START_SIZE': 32,
         'RPN_ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_MAX_LEVEL': 6,
         'RPN_MIN_LEVEL': 2,
         'USE_GN': False,
         'ZERO_INIT_LATERAL': False},
 'GROUP_NORM': {'DIM_PER_GP': -1, 'EPSILON': 1e-05, 'NUM_GROUPS': 32},
 'KRCNN': {'CONV_HEAD_DIM': 256,
           'CONV_HEAD_KERNEL': 3,
           'CONV_INIT': 'GaussianFill',
           'DECONV_DIM': 256,
           'DECONV_KERNEL': 4,
           'DILATION': 1,
           'HEATMAP_SIZE': -1,
           'INFERENCE_MIN_SIZE': 0,
           'KEYPOINT_CONFIDENCE': 'bbox',
           'LOSS_WEIGHT': 1.0,
           'MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH': 20,
           'NMS_OKS': False,
           'NORMALIZE_BY_VISIBLE_KEYPOINTS': True,
           'NUM_KEYPOINTS': -1,
           'NUM_STACKED_CONVS': 8,
           'ROI_KEYPOINTS_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'UP_SCALE': -1,
           'USE_DECONV': False,
           'USE_DECONV_OUTPUT': False},
 'MATLAB': 'matlab',
 'MEMONGER': True,
 'MEMONGER_SHARE_ACTIVATIONS': False,
 'MODEL': {'BBOX_REG_WEIGHTS': (10.0, 10.0, 5.0, 5.0),
           'CLS_AGNOSTIC_BBOX_REG': False,
           'CONV_BODY': 'FPN.add_fpn_ResNet101_conv5_body',
           'EXECUTION_TYPE': 'dag',
           'FASTER_RCNN': True,
           'KEYPOINTS_ON': False,
           'MASK_ON': True,
           'NUM_CLASSES': 81,
           'RPN_ONLY': False,
           'TYPE': 'generalized_rcnn'},
 'MRCNN': {'CLS_SPECIFIC_MASK': True,
           'CONV_INIT': 'MSRAFill',
           'DILATION': 1,
           'DIM_REDUCED': 256,
           'RESOLUTION': 28,
           'ROI_MASK_HEAD': 'mask_rcnn_heads.mask_rcnn_fcn_head_v1up4convs',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 14,
           'ROI_XFORM_SAMPLING_RATIO': 2,
           'THRESH_BINARIZE': 0.5,
           'UPSAMPLE_RATIO': 1,
           'USE_FC_OUTPUT': False,
           'WEIGHT_LOSS_MASK': 1.0},
 'NUM_GPUS': 1,
 'OUTPUT_DIR': '.',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RESNETS': {'NUM_GROUPS': 1,
             'RES5_DILATION': 1,
             'SHORTCUT_FUNC': 'basic_bn_shortcut',
             'STEM_FUNC': 'basic_bn_stem',
             'STRIDE_1X1': True,
             'TRANS_FUNC': 'bottleneck_transformation',
             'WIDTH_PER_GROUP': 64},
 'RETINANET': {'ANCHOR_SCALE': 4,
               'ASPECT_RATIOS': (0.5, 1.0, 2.0),
               'BBOX_REG_BETA': 0.11,
               'BBOX_REG_WEIGHT': 1.0,
               'CLASS_SPECIFIC_BBOX': False,
               'INFERENCE_TH': 0.05,
               'LOSS_ALPHA': 0.25,
               'LOSS_GAMMA': 2.0,
               'NEGATIVE_OVERLAP': 0.4,
               'NUM_CONVS': 4,
               'POSITIVE_OVERLAP': 0.5,
               'PRE_NMS_TOP_N': 1000,
               'PRIOR_PROB': 0.01,
               'RETINANET_ON': False,
               'SCALES_PER_OCTAVE': 3,
               'SHARE_CLS_BBOX_TOWER': False,
               'SOFTMAX': False},
 'RFCN': {'PS_GRID_SIZE': 3},
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/wattanapongsu/library/detectron',
 'RPN': {'ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_ON': True,
         'SIZES': (64, 128, 256, 512),
         'STRIDE': 16},
 'SOLVER': {'BASE_LR': 0.001,
            'GAMMA': 0.1,
            'LOG_LR_CHANGE_THRESHOLD': 1.1,
            'LRS': [],
            'LR_POLICY': 'steps_with_decay',
            'MAX_ITER': 90000,
            'MOMENTUM': 0.9,
            'SCALE_MOMENTUM': True,
            'SCALE_MOMENTUM_THRESHOLD': 1.1,
            'STEPS': [0, 60000, 80000],
            'STEP_SIZE': 30000,
            'WARM_UP_FACTOR': 0.3333333333333333,
            'WARM_UP_ITERS': 500,
            'WARM_UP_METHOD': u'linear',
            'WEIGHT_DECAY': 0.0001,
            'WEIGHT_DECAY_GN': 0.0},
 'TEST': {'BBOX_AUG': {'AREA_TH_HI': 32400,
                       'AREA_TH_LO': 2500,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'COORD_HEUR': 'UNION',
                       'ENABLED': False,
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False,
                       'SCORE_HEUR': 'UNION'},
          'BBOX_REG': True,
          'BBOX_VOTE': {'ENABLED': False,
                        'SCORING_METHOD': 'ID',
                        'SCORING_METHOD_BETA': 1.0,
                        'VOTE_TH': 0.8},
          'COMPETITION_MODE': True,
          'DATASETS': ('coco_2014_minival',),
          'DETECTIONS_PER_IM': 100,
          'FORCE_JSON_DATASET_EVAL': False,
          'KPS_AUG': {'AREA_TH': 32400,
                      'ASPECT_RATIOS': (),
                      'ASPECT_RATIO_H_FLIP': False,
                      'ENABLED': False,
                      'HEUR': 'HM_AVG',
                      'H_FLIP': False,
                      'MAX_SIZE': 4000,
                      'SCALES': (),
                      'SCALE_H_FLIP': False,
                      'SCALE_SIZE_DEP': False},
          'MASK_AUG': {'AREA_TH': 32400,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'ENABLED': False,
                       'HEUR': 'SOFT_AVG',
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False},
          'MAX_SIZE': 1333,
          'NMS': 0.5,
          'PRECOMPUTED_PROPOSALS': False,
          'PROPOSAL_FILES': (),
          'PROPOSAL_LIMIT': 2000,
          'RPN_MIN_SIZE': 0,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 1000,
          'RPN_PRE_NMS_TOP_N': 1000,
          'SCALE': 800,
          'SCORE_THRESH': 0.05,
          'SOFT_NMS': {'ENABLED': False, 'METHOD': 'linear', 'SIGMA': 0.5},
          'WEIGHTS': '/tmp/detectron-output/train/coco_2014_train:coco_2014_valminusminival:coco_2017_train/generalized_rcnn/model_final.pkl'},
 'TRAIN': {'ASPECT_GROUPING': True,
           'AUTO_RESUME': True,
           'BATCH_SIZE_PER_IM': 128,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CROWD_FILTER_THRESH': 0.7,
           'DATASETS': ('coco_2014_train',
                        'coco_2014_valminusminival',
                        'coco_2017_train'),
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'FREEZE_AT': 2,
           'FREEZE_CONV_BODY': False,
           'GT_MIN_AREA': -1,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 1333,
           'PROPOSAL_FILES': (),
           'RPN_BATCH_SIZE_PER_IM': 256,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 2000,
           'RPN_STRADDLE_THRESH': 0,
           'SCALES': (800,),
           'SNAPSHOT_ITERS': 20000,
           'USE_FLIPPED': True,
           'WEIGHTS': '/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-101.pkl'},
 'USE_NCCL': False,
 'VIS': False,
 'VIS_TH': 0.9}
output dir : ./test/coco_2014_minival/generalized_rcnn
loading annotations into memory...
Done (t=0.57s)
creating index...
index created!
WARNING cnn.py:  25: [====DEPRECATE WARNING====]: you are creating an object from CNNModelHelper class which will be deprecated soon. Please use ModelHelper object with brew module. For more information, please refer to caffe2.ai and python/brew.py, python/brew_test.py for more information.
INFO net.py:  59: Loading weights from: /tmp/detectron-output/train/coco_2014_train:coco_2014_valminusminival:coco_2017_train/generalized_rcnn/model_final.pkl
I0720 22:55:51.284519  8787 net_dag_utils.cc:102] Operator graph pruning prior to chain compute took: 0.00023712 secs
I0720 22:55:51.303686  8787 net_dag_utils.cc:102] Operator graph pruning prior to chain compute took: 0.000187792 secs
I0720 22:55:51.306102  8787 net_dag_utils.cc:102] Operator graph pruning prior to chain compute took: 1.5342e-05 secs
I0720 22:55:52.653517  8787 net_async_base.cc:435] Using specified CPU pool size: 4; NUMA node id: -1
I0720 22:55:52.653543  8787 net_async_base.cc:440] Created new CPU pool, size: 4; NUMA node id: -1
I0720 22:55:55.045595  8787 net_async_base.cc:435] Using specified CPU pool size: 4; NUMA node id: -1
I0720 22:55:55.045619  8787 net_async_base.cc:440] Created new CPU pool, size: 4; NUMA node id: -1
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1/2500 2.559s + 0.120s (eta: 1:51:33)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 11/2500 0.361s + 0.054s (eta: 0:17:12)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 21/2500 0.252s + 0.051s (eta: 0:12:32)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 31/2500 0.225s + 0.056s (eta: 0:11:33)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 41/2500 0.204s + 0.057s (eta: 0:10:41)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 51/2500 0.191s + 0.058s (eta: 0:10:09)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 61/2500 0.182s + 0.055s (eta: 0:09:39)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 71/2500 0.176s + 0.053s (eta: 0:09:15)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 81/2500 0.171s + 0.052s (eta: 0:08:58)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 91/2500 0.167s + 0.054s (eta: 0:08:52)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 101/2500 0.164s + 0.056s (eta: 0:08:48)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 111/2500 0.160s + 0.056s (eta: 0:08:36)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 121/2500 0.159s + 0.057s (eta: 0:08:33)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 131/2500 0.158s + 0.057s (eta: 0:08:28)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 141/2500 0.156s + 0.058s (eta: 0:08:25)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 151/2500 0.155s + 0.059s (eta: 0:08:22)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 161/2500 0.154s + 0.059s (eta: 0:08:18)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 171/2500 0.153s + 0.059s (eta: 0:08:13)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 181/2500 0.152s + 0.060s (eta: 0:08:11)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 191/2500 0.152s + 0.060s (eta: 0:08:08)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 201/2500 0.151s + 0.059s (eta: 0:08:03)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 211/2500 0.151s + 0.059s (eta: 0:08:00)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 221/2500 0.150s + 0.059s (eta: 0:07:54)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 231/2500 0.149s + 0.058s (eta: 0:07:49)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 241/2500 0.148s + 0.058s (eta: 0:07:46)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 251/2500 0.148s + 0.058s (eta: 0:07:42)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 261/2500 0.148s + 0.058s (eta: 0:07:40)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 271/2500 0.147s + 0.058s (eta: 0:07:37)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 281/2500 0.147s + 0.058s (eta: 0:07:33)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 291/2500 0.147s + 0.057s (eta: 0:07:30)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 301/2500 0.146s + 0.058s (eta: 0:07:29)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 311/2500 0.146s + 0.058s (eta: 0:07:27)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 321/2500 0.146s + 0.058s (eta: 0:07:24)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 331/2500 0.146s + 0.058s (eta: 0:07:22)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 341/2500 0.146s + 0.059s (eta: 0:07:21)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 351/2500 0.146s + 0.058s (eta: 0:07:17)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 361/2500 0.146s + 0.058s (eta: 0:07:16)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 371/2500 0.145s + 0.058s (eta: 0:07:13)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 381/2500 0.145s + 0.058s (eta: 0:07:09)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 391/2500 0.145s + 0.058s (eta: 0:07:06)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 401/2500 0.145s + 0.057s (eta: 0:07:03)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 411/2500 0.144s + 0.057s (eta: 0:07:01)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 421/2500 0.144s + 0.057s (eta: 0:06:58)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 431/2500 0.144s + 0.057s (eta: 0:06:55)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 441/2500 0.144s + 0.057s (eta: 0:06:53)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 451/2500 0.143s + 0.057s (eta: 0:06:50)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 461/2500 0.143s + 0.057s (eta: 0:06:47)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 471/2500 0.143s + 0.056s (eta: 0:06:44)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 481/2500 0.143s + 0.056s (eta: 0:06:42)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 491/2500 0.143s + 0.056s (eta: 0:06:40)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 501/2500 0.143s + 0.057s (eta: 0:06:39)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 511/2500 0.143s + 0.057s (eta: 0:06:37)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 521/2500 0.143s + 0.057s (eta: 0:06:35)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 531/2500 0.143s + 0.057s (eta: 0:06:33)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 541/2500 0.143s + 0.057s (eta: 0:06:31)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 551/2500 0.143s + 0.057s (eta: 0:06:29)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 561/2500 0.142s + 0.058s (eta: 0:06:27)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 571/2500 0.142s + 0.057s (eta: 0:06:25)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 581/2500 0.142s + 0.058s (eta: 0:06:24)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 591/2500 0.142s + 0.058s (eta: 0:06:22)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 601/2500 0.142s + 0.058s (eta: 0:06:19)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 611/2500 0.142s + 0.058s (eta: 0:06:17)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 621/2500 0.142s + 0.058s (eta: 0:06:15)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 631/2500 0.142s + 0.058s (eta: 0:06:13)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 641/2500 0.142s + 0.059s (eta: 0:06:11)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 651/2500 0.141s + 0.059s (eta: 0:06:09)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 661/2500 0.141s + 0.059s (eta: 0:06:08)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 671/2500 0.141s + 0.059s (eta: 0:06:06)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 681/2500 0.141s + 0.059s (eta: 0:06:03)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 691/2500 0.141s + 0.059s (eta: 0:06:01)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 701/2500 0.141s + 0.059s (eta: 0:06:00)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 711/2500 0.141s + 0.059s (eta: 0:05:57)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 721/2500 0.141s + 0.059s (eta: 0:05:55)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 731/2500 0.141s + 0.059s (eta: 0:05:54)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 741/2500 0.141s + 0.059s (eta: 0:05:51)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 751/2500 0.141s + 0.059s (eta: 0:05:49)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 761/2500 0.141s + 0.059s (eta: 0:05:47)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 771/2500 0.141s + 0.059s (eta: 0:05:45)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 781/2500 0.141s + 0.058s (eta: 0:05:42)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 791/2500 0.141s + 0.059s (eta: 0:05:41)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 801/2500 0.141s + 0.059s (eta: 0:05:39)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 811/2500 0.141s + 0.059s (eta: 0:05:36)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 821/2500 0.141s + 0.059s (eta: 0:05:34)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 831/2500 0.141s + 0.058s (eta: 0:05:32)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 841/2500 0.141s + 0.059s (eta: 0:05:30)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 851/2500 0.141s + 0.058s (eta: 0:05:28)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 861/2500 0.141s + 0.058s (eta: 0:05:26)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 871/2500 0.141s + 0.058s (eta: 0:05:24)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 881/2500 0.141s + 0.058s (eta: 0:05:22)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 891/2500 0.141s + 0.058s (eta: 0:05:19)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 901/2500 0.141s + 0.058s (eta: 0:05:17)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 911/2500 0.141s + 0.058s (eta: 0:05:15)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 921/2500 0.141s + 0.058s (eta: 0:05:13)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 931/2500 0.140s + 0.058s (eta: 0:05:11)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 941/2500 0.140s + 0.058s (eta: 0:05:09)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 951/2500 0.140s + 0.058s (eta: 0:05:07)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 961/2500 0.140s + 0.058s (eta: 0:05:05)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 971/2500 0.140s + 0.058s (eta: 0:05:03)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 981/2500 0.140s + 0.058s (eta: 0:05:01)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 991/2500 0.140s + 0.058s (eta: 0:04:59)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1001/2500 0.140s + 0.058s (eta: 0:04:57)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1011/2500 0.140s + 0.058s (eta: 0:04:55)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1021/2500 0.140s + 0.058s (eta: 0:04:53)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1031/2500 0.140s + 0.058s (eta: 0:04:51)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1041/2500 0.140s + 0.058s (eta: 0:04:49)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1051/2500 0.140s + 0.058s (eta: 0:04:47)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1061/2500 0.140s + 0.058s (eta: 0:04:44)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1071/2500 0.140s + 0.058s (eta: 0:04:43)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1081/2500 0.140s + 0.058s (eta: 0:04:41)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1091/2500 0.140s + 0.058s (eta: 0:04:39)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1101/2500 0.140s + 0.058s (eta: 0:04:36)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1111/2500 0.140s + 0.058s (eta: 0:04:34)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1121/2500 0.140s + 0.058s (eta: 0:04:33)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1131/2500 0.140s + 0.058s (eta: 0:04:31)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1141/2500 0.140s + 0.058s (eta: 0:04:28)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1151/2500 0.140s + 0.058s (eta: 0:04:26)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1161/2500 0.140s + 0.058s (eta: 0:04:24)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1171/2500 0.140s + 0.058s (eta: 0:04:23)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1181/2500 0.140s + 0.058s (eta: 0:04:21)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1191/2500 0.140s + 0.058s (eta: 0:04:19)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1201/2500 0.140s + 0.058s (eta: 0:04:17)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1211/2500 0.140s + 0.058s (eta: 0:04:15)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1221/2500 0.140s + 0.058s (eta: 0:04:13)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1231/2500 0.140s + 0.058s (eta: 0:04:11)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1241/2500 0.140s + 0.058s (eta: 0:04:09)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1251/2500 0.140s + 0.058s (eta: 0:04:07)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1261/2500 0.140s + 0.058s (eta: 0:04:05)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1271/2500 0.140s + 0.058s (eta: 0:04:03)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1281/2500 0.140s + 0.058s (eta: 0:04:01)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1291/2500 0.140s + 0.058s (eta: 0:03:59)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1301/2500 0.140s + 0.058s (eta: 0:03:57)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1311/2500 0.140s + 0.058s (eta: 0:03:55)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1321/2500 0.140s + 0.058s (eta: 0:03:53)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1331/2500 0.140s + 0.058s (eta: 0:03:51)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1341/2500 0.140s + 0.058s (eta: 0:03:49)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1351/2500 0.140s + 0.058s (eta: 0:03:47)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1361/2500 0.140s + 0.058s (eta: 0:03:45)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1371/2500 0.140s + 0.058s (eta: 0:03:43)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1381/2500 0.140s + 0.058s (eta: 0:03:41)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1391/2500 0.140s + 0.058s (eta: 0:03:39)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1401/2500 0.140s + 0.058s (eta: 0:03:37)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1411/2500 0.140s + 0.058s (eta: 0:03:35)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1421/2500 0.140s + 0.058s (eta: 0:03:33)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1431/2500 0.140s + 0.058s (eta: 0:03:31)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1441/2500 0.140s + 0.058s (eta: 0:03:29)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1451/2500 0.140s + 0.058s (eta: 0:03:27)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1461/2500 0.140s + 0.058s (eta: 0:03:25)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1471/2500 0.140s + 0.058s (eta: 0:03:23)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1481/2500 0.140s + 0.058s (eta: 0:03:21)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1491/2500 0.140s + 0.058s (eta: 0:03:19)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1501/2500 0.140s + 0.058s (eta: 0:03:17)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1511/2500 0.140s + 0.058s (eta: 0:03:15)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1521/2500 0.140s + 0.058s (eta: 0:03:13)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1531/2500 0.140s + 0.058s (eta: 0:03:11)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1541/2500 0.140s + 0.058s (eta: 0:03:09)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1551/2500 0.140s + 0.058s (eta: 0:03:07)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1561/2500 0.140s + 0.058s (eta: 0:03:06)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1571/2500 0.140s + 0.058s (eta: 0:03:04)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1581/2500 0.140s + 0.059s (eta: 0:03:02)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1591/2500 0.140s + 0.059s (eta: 0:03:00)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1601/2500 0.140s + 0.059s (eta: 0:02:58)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1611/2500 0.140s + 0.059s (eta: 0:02:56)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1621/2500 0.140s + 0.059s (eta: 0:02:54)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1631/2500 0.140s + 0.058s (eta: 0:02:52)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1641/2500 0.140s + 0.058s (eta: 0:02:50)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1651/2500 0.140s + 0.058s (eta: 0:02:48)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1661/2500 0.140s + 0.058s (eta: 0:02:46)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1671/2500 0.140s + 0.058s (eta: 0:02:44)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1681/2500 0.140s + 0.058s (eta: 0:02:42)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1691/2500 0.140s + 0.058s (eta: 0:02:40)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1701/2500 0.140s + 0.058s (eta: 0:02:38)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1711/2500 0.140s + 0.058s (eta: 0:02:36)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1721/2500 0.140s + 0.058s (eta: 0:02:34)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1731/2500 0.140s + 0.058s (eta: 0:02:32)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1741/2500 0.140s + 0.058s (eta: 0:02:30)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1751/2500 0.140s + 0.058s (eta: 0:02:28)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1761/2500 0.140s + 0.058s (eta: 0:02:26)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1771/2500 0.140s + 0.058s (eta: 0:02:24)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1781/2500 0.140s + 0.058s (eta: 0:02:22)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1791/2500 0.140s + 0.058s (eta: 0:02:20)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1801/2500 0.140s + 0.058s (eta: 0:02:18)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1811/2500 0.140s + 0.058s (eta: 0:02:16)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1821/2500 0.140s + 0.058s (eta: 0:02:14)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1831/2500 0.140s + 0.058s (eta: 0:02:12)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1841/2500 0.140s + 0.058s (eta: 0:02:10)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1851/2500 0.140s + 0.058s (eta: 0:02:08)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1861/2500 0.140s + 0.058s (eta: 0:02:06)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1871/2500 0.140s + 0.058s (eta: 0:02:04)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1881/2500 0.140s + 0.058s (eta: 0:02:02)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1891/2500 0.140s + 0.058s (eta: 0:02:00)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1901/2500 0.140s + 0.058s (eta: 0:01:58)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1911/2500 0.140s + 0.058s (eta: 0:01:56)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1921/2500 0.140s + 0.058s (eta: 0:01:54)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1931/2500 0.140s + 0.058s (eta: 0:01:52)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1941/2500 0.140s + 0.058s (eta: 0:01:50)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1951/2500 0.140s + 0.058s (eta: 0:01:48)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1961/2500 0.140s + 0.058s (eta: 0:01:46)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1971/2500 0.140s + 0.058s (eta: 0:01:44)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1981/2500 0.140s + 0.058s (eta: 0:01:42)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 1991/2500 0.140s + 0.058s (eta: 0:01:40)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2001/2500 0.140s + 0.058s (eta: 0:01:38)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2011/2500 0.140s + 0.058s (eta: 0:01:36)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2021/2500 0.140s + 0.058s (eta: 0:01:34)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2031/2500 0.140s + 0.058s (eta: 0:01:32)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2041/2500 0.140s + 0.058s (eta: 0:01:30)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2051/2500 0.140s + 0.058s (eta: 0:01:29)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2061/2500 0.140s + 0.058s (eta: 0:01:26)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2071/2500 0.140s + 0.058s (eta: 0:01:25)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2081/2500 0.140s + 0.058s (eta: 0:01:22)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2091/2500 0.140s + 0.058s (eta: 0:01:21)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2101/2500 0.140s + 0.058s (eta: 0:01:19)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2111/2500 0.140s + 0.058s (eta: 0:01:17)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2121/2500 0.140s + 0.058s (eta: 0:01:15)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2131/2500 0.140s + 0.058s (eta: 0:01:13)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2141/2500 0.140s + 0.058s (eta: 0:01:11)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2151/2500 0.140s + 0.058s (eta: 0:01:09)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2161/2500 0.140s + 0.058s (eta: 0:01:07)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2171/2500 0.140s + 0.058s (eta: 0:01:05)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2181/2500 0.140s + 0.058s (eta: 0:01:03)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2191/2500 0.140s + 0.058s (eta: 0:01:01)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2201/2500 0.140s + 0.058s (eta: 0:00:59)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2211/2500 0.140s + 0.058s (eta: 0:00:57)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2221/2500 0.140s + 0.058s (eta: 0:00:55)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2231/2500 0.140s + 0.058s (eta: 0:00:53)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2241/2500 0.140s + 0.058s (eta: 0:00:51)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2251/2500 0.140s + 0.058s (eta: 0:00:49)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2261/2500 0.140s + 0.058s (eta: 0:00:47)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2271/2500 0.140s + 0.058s (eta: 0:00:45)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2281/2500 0.140s + 0.058s (eta: 0:00:43)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2291/2500 0.140s + 0.058s (eta: 0:00:41)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2301/2500 0.140s + 0.058s (eta: 0:00:39)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2311/2500 0.140s + 0.058s (eta: 0:00:37)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2321/2500 0.140s + 0.058s (eta: 0:00:35)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2331/2500 0.140s + 0.058s (eta: 0:00:33)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2341/2500 0.140s + 0.058s (eta: 0:00:31)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2351/2500 0.140s + 0.058s (eta: 0:00:29)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2361/2500 0.140s + 0.058s (eta: 0:00:27)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2371/2500 0.140s + 0.058s (eta: 0:00:25)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2381/2500 0.140s + 0.058s (eta: 0:00:23)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2391/2500 0.140s + 0.058s (eta: 0:00:21)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2401/2500 0.140s + 0.058s (eta: 0:00:19)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2411/2500 0.140s + 0.058s (eta: 0:00:17)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2421/2500 0.140s + 0.058s (eta: 0:00:15)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2431/2500 0.140s + 0.058s (eta: 0:00:13)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2441/2500 0.140s + 0.058s (eta: 0:00:11)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2451/2500 0.140s + 0.058s (eta: 0:00:09)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2461/2500 0.140s + 0.058s (eta: 0:00:07)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2471/2500 0.140s + 0.058s (eta: 0:00:05)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2481/2500 0.140s + 0.058s (eta: 0:00:03)
INFO test_engine.py: 289: im_detect: range [1, 2500] of 5000: 2491/2500 0.140s + 0.058s (eta: 0:00:01)
INFO test_engine.py: 322: Wrote detections to: /home/wattanapongsu/library/detectron/test/coco_2014_minival/generalized_rcnn/detection_range_0_2500.pkl
INFO subprocess.py: 115: # ---------------------------------------------------------------------------- #
INFO subprocess.py: 117: stdout of subprocess 1 with range [2501, 5000]
INFO subprocess.py: 119: # ---------------------------------------------------------------------------- #
E0720 22:55:46.062690  8789 init_intrinsics_check.cc:43] CPU feature avx is present on your machine, but the Caffe2 binary is not compiled with it. It means you may not get the full speed of your CPU.
Found Detectron ops lib: /home/wattanapongsu/anaconda2/envs/mask/lib/libcaffe2_detectron_ops_gpu.so
INFO test_net.py:  98: Called with args:
INFO test_net.py:  99: Namespace(cfg_file='./test/coco_2014_minival/generalized_rcnn/detection_range_config.yaml', multi_gpu_testing=False, opts=['NUM_GPUS', '1', 'TEST.DATASETS', '("coco_2014_minival",)', 'TEST.WEIGHTS', '/tmp/detectron-output/train/coco_2014_train:coco_2014_valminusminival:coco_2017_train/generalized_rcnn/model_final.pkl'], range=[2500, 5000], vis=False, wait=True)
INFO test_net.py: 105: Testing with config:
INFO test_net.py: 106: {'BBOX_XFORM_CLIP': 4.135166556742356,
 'CLUSTER': {'ON_CLUSTER': False},
 'DATA_LOADER': {'BLOBS_QUEUE_CAPACITY': 8,
                 'MINIBATCH_QUEUE_SIZE': 64,
                 'NUM_THREADS': 4},
 'DEDUP_BOXES': 0.0625,
 'DOWNLOAD_CACHE': '/tmp/detectron-download-cache',
 'EPS': 1e-14,
 'EXPECTED_RESULTS': [],
 'EXPECTED_RESULTS_ATOL': 0.005,
 'EXPECTED_RESULTS_EMAIL': '',
 'EXPECTED_RESULTS_RTOL': 0.1,
 'FAST_RCNN': {'CONV_HEAD_DIM': 256,
               'MLP_HEAD_DIM': 1024,
               'NUM_STACKED_CONVS': 4,
               'ROI_BOX_HEAD': 'fast_rcnn_heads.add_roi_2mlp_head',
               'ROI_XFORM_METHOD': 'RoIAlign',
               'ROI_XFORM_RESOLUTION': 7,
               'ROI_XFORM_SAMPLING_RATIO': 2},
 'FPN': {'COARSEST_STRIDE': 32,
         'DIM': 256,
         'EXTRA_CONV_LEVELS': False,
         'FPN_ON': True,
         'MULTILEVEL_ROIS': True,
         'MULTILEVEL_RPN': True,
         'ROI_CANONICAL_LEVEL': 4,
         'ROI_CANONICAL_SCALE': 224,
         'ROI_MAX_LEVEL': 5,
         'ROI_MIN_LEVEL': 2,
         'RPN_ANCHOR_START_SIZE': 32,
         'RPN_ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_MAX_LEVEL': 6,
         'RPN_MIN_LEVEL': 2,
         'USE_GN': False,
         'ZERO_INIT_LATERAL': False},
 'GROUP_NORM': {'DIM_PER_GP': -1, 'EPSILON': 1e-05, 'NUM_GROUPS': 32},
 'KRCNN': {'CONV_HEAD_DIM': 256,
           'CONV_HEAD_KERNEL': 3,
           'CONV_INIT': 'GaussianFill',
           'DECONV_DIM': 256,
           'DECONV_KERNEL': 4,
           'DILATION': 1,
           'HEATMAP_SIZE': -1,
           'INFERENCE_MIN_SIZE': 0,
           'KEYPOINT_CONFIDENCE': 'bbox',
           'LOSS_WEIGHT': 1.0,
           'MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH': 20,
           'NMS_OKS': False,
           'NORMALIZE_BY_VISIBLE_KEYPOINTS': True,
           'NUM_KEYPOINTS': -1,
           'NUM_STACKED_CONVS': 8,
           'ROI_KEYPOINTS_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'UP_SCALE': -1,
           'USE_DECONV': False,
           'USE_DECONV_OUTPUT': False},
 'MATLAB': 'matlab',
 'MEMONGER': True,
 'MEMONGER_SHARE_ACTIVATIONS': False,
 'MODEL': {'BBOX_REG_WEIGHTS': (10.0, 10.0, 5.0, 5.0),
           'CLS_AGNOSTIC_BBOX_REG': False,
           'CONV_BODY': 'FPN.add_fpn_ResNet101_conv5_body',
           'EXECUTION_TYPE': 'dag',
           'FASTER_RCNN': True,
           'KEYPOINTS_ON': False,
           'MASK_ON': True,
           'NUM_CLASSES': 81,
           'RPN_ONLY': False,
           'TYPE': 'generalized_rcnn'},
 'MRCNN': {'CLS_SPECIFIC_MASK': True,
           'CONV_INIT': 'MSRAFill',
           'DILATION': 1,
           'DIM_REDUCED': 256,
           'RESOLUTION': 28,
           'ROI_MASK_HEAD': 'mask_rcnn_heads.mask_rcnn_fcn_head_v1up4convs',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 14,
           'ROI_XFORM_SAMPLING_RATIO': 2,
           'THRESH_BINARIZE': 0.5,
           'UPSAMPLE_RATIO': 1,
           'USE_FC_OUTPUT': False,
           'WEIGHT_LOSS_MASK': 1.0},
 'NUM_GPUS': 1,
 'OUTPUT_DIR': '.',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RESNETS': {'NUM_GROUPS': 1,
             'RES5_DILATION': 1,
             'SHORTCUT_FUNC': 'basic_bn_shortcut',
             'STEM_FUNC': 'basic_bn_stem',
             'STRIDE_1X1': True,
             'TRANS_FUNC': 'bottleneck_transformation',
             'WIDTH_PER_GROUP': 64},
 'RETINANET': {'ANCHOR_SCALE': 4,
               'ASPECT_RATIOS': (0.5, 1.0, 2.0),
               'BBOX_REG_BETA': 0.11,
               'BBOX_REG_WEIGHT': 1.0,
               'CLASS_SPECIFIC_BBOX': False,
               'INFERENCE_TH': 0.05,
               'LOSS_ALPHA': 0.25,
               'LOSS_GAMMA': 2.0,
               'NEGATIVE_OVERLAP': 0.4,
               'NUM_CONVS': 4,
               'POSITIVE_OVERLAP': 0.5,
               'PRE_NMS_TOP_N': 1000,
               'PRIOR_PROB': 0.01,
               'RETINANET_ON': False,
               'SCALES_PER_OCTAVE': 3,
               'SHARE_CLS_BBOX_TOWER': False,
               'SOFTMAX': False},
 'RFCN': {'PS_GRID_SIZE': 3},
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/wattanapongsu/library/detectron',
 'RPN': {'ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_ON': True,
         'SIZES': (64, 128, 256, 512),
         'STRIDE': 16},
 'SOLVER': {'BASE_LR': 0.001,
            'GAMMA': 0.1,
            'LOG_LR_CHANGE_THRESHOLD': 1.1,
            'LRS': [],
            'LR_POLICY': 'steps_with_decay',
            'MAX_ITER': 90000,
            'MOMENTUM': 0.9,
            'SCALE_MOMENTUM': True,
            'SCALE_MOMENTUM_THRESHOLD': 1.1,
            'STEPS': [0, 60000, 80000],
            'STEP_SIZE': 30000,
            'WARM_UP_FACTOR': 0.3333333333333333,
            'WARM_UP_ITERS': 500,
            'WARM_UP_METHOD': u'linear',
            'WEIGHT_DECAY': 0.0001,
            'WEIGHT_DECAY_GN': 0.0},
 'TEST': {'BBOX_AUG': {'AREA_TH_HI': 32400,
                       'AREA_TH_LO': 2500,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'COORD_HEUR': 'UNION',
                       'ENABLED': False,
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False,
                       'SCORE_HEUR': 'UNION'},
          'BBOX_REG': True,
          'BBOX_VOTE': {'ENABLED': False,
                        'SCORING_METHOD': 'ID',
                        'SCORING_METHOD_BETA': 1.0,
                        'VOTE_TH': 0.8},
          'COMPETITION_MODE': True,
          'DATASETS': ('coco_2014_minival',),
          'DETECTIONS_PER_IM': 100,
          'FORCE_JSON_DATASET_EVAL': False,
          'KPS_AUG': {'AREA_TH': 32400,
                      'ASPECT_RATIOS': (),
                      'ASPECT_RATIO_H_FLIP': False,
                      'ENABLED': False,
                      'HEUR': 'HM_AVG',
                      'H_FLIP': False,
                      'MAX_SIZE': 4000,
                      'SCALES': (),
                      'SCALE_H_FLIP': False,
                      'SCALE_SIZE_DEP': False},
          'MASK_AUG': {'AREA_TH': 32400,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'ENABLED': False,
                       'HEUR': 'SOFT_AVG',
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False},
          'MAX_SIZE': 1333,
          'NMS': 0.5,
          'PRECOMPUTED_PROPOSALS': False,
          'PROPOSAL_FILES': (),
          'PROPOSAL_LIMIT': 2000,
          'RPN_MIN_SIZE': 0,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 1000,
          'RPN_PRE_NMS_TOP_N': 1000,
          'SCALE': 800,
          'SCORE_THRESH': 0.05,
          'SOFT_NMS': {'ENABLED': False, 'METHOD': 'linear', 'SIGMA': 0.5},
          'WEIGHTS': '/tmp/detectron-output/train/coco_2014_train:coco_2014_valminusminival:coco_2017_train/generalized_rcnn/model_final.pkl'},
 'TRAIN': {'ASPECT_GROUPING': True,
           'AUTO_RESUME': True,
           'BATCH_SIZE_PER_IM': 128,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CROWD_FILTER_THRESH': 0.7,
           'DATASETS': ('coco_2014_train',
                        'coco_2014_valminusminival',
                        'coco_2017_train'),
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'FREEZE_AT': 2,
           'FREEZE_CONV_BODY': False,
           'GT_MIN_AREA': -1,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 1333,
           'PROPOSAL_FILES': (),
           'RPN_BATCH_SIZE_PER_IM': 256,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 2000,
           'RPN_STRADDLE_THRESH': 0,
           'SCALES': (800,),
           'SNAPSHOT_ITERS': 20000,
           'USE_FLIPPED': True,
           'WEIGHTS': '/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-101.pkl'},
 'USE_NCCL': False,
 'VIS': False,
 'VIS_TH': 0.9}
output dir : ./test/coco_2014_minival/generalized_rcnn
loading annotations into memory...
Done (t=0.57s)
creating index...
index created!
WARNING cnn.py:  25: [====DEPRECATE WARNING====]: you are creating an object from CNNModelHelper class which will be deprecated soon. Please use ModelHelper object with brew module. For more information, please refer to caffe2.ai and python/brew.py, python/brew_test.py for more information.
INFO net.py:  59: Loading weights from: /tmp/detectron-output/train/coco_2014_train:coco_2014_valminusminival:coco_2017_train/generalized_rcnn/model_final.pkl
I0720 22:55:51.345438  8789 net_dag_utils.cc:102] Operator graph pruning prior to chain compute took: 0.000213904 secs
I0720 22:55:51.364876  8789 net_dag_utils.cc:102] Operator graph pruning prior to chain compute took: 0.000192613 secs
I0720 22:55:51.367689  8789 net_dag_utils.cc:102] Operator graph pruning prior to chain compute took: 1.5302e-05 secs
I0720 22:55:52.714522  8789 net_async_base.cc:435] Using specified CPU pool size: 4; NUMA node id: -1
I0720 22:55:52.714556  8789 net_async_base.cc:440] Created new CPU pool, size: 4; NUMA node id: -1
I0720 22:55:55.043975  8789 net_async_base.cc:435] Using specified CPU pool size: 4; NUMA node id: -1
I0720 22:55:55.044025  8789 net_async_base.cc:440] Created new CPU pool, size: 4; NUMA node id: -1
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2501/5000 2.543s + 0.097s (eta: 1:49:57)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2511/5000 0.378s + 0.078s (eta: 0:18:56)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2521/5000 0.271s + 0.072s (eta: 0:14:11)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2531/5000 0.229s + 0.068s (eta: 0:12:13)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2541/5000 0.212s + 0.063s (eta: 0:11:14)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2551/5000 0.199s + 0.062s (eta: 0:10:38)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2561/5000 0.190s + 0.060s (eta: 0:10:11)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2571/5000 0.183s + 0.059s (eta: 0:09:48)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2581/5000 0.178s + 0.061s (eta: 0:09:38)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2591/5000 0.174s + 0.060s (eta: 0:09:23)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2601/5000 0.170s + 0.060s (eta: 0:09:13)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2611/5000 0.168s + 0.061s (eta: 0:09:07)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2621/5000 0.167s + 0.061s (eta: 0:09:02)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2631/5000 0.165s + 0.060s (eta: 0:08:53)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2641/5000 0.163s + 0.059s (eta: 0:08:45)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2651/5000 0.162s + 0.059s (eta: 0:08:39)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2661/5000 0.161s + 0.058s (eta: 0:08:33)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2671/5000 0.160s + 0.058s (eta: 0:08:29)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2681/5000 0.160s + 0.058s (eta: 0:08:25)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2691/5000 0.159s + 0.059s (eta: 0:08:22)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2701/5000 0.158s + 0.059s (eta: 0:08:19)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2711/5000 0.157s + 0.060s (eta: 0:08:17)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2721/5000 0.157s + 0.060s (eta: 0:08:12)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2731/5000 0.156s + 0.059s (eta: 0:08:08)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2741/5000 0.155s + 0.059s (eta: 0:08:05)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2751/5000 0.155s + 0.059s (eta: 0:08:01)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2761/5000 0.154s + 0.060s (eta: 0:07:59)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2771/5000 0.154s + 0.059s (eta: 0:07:55)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2781/5000 0.153s + 0.060s (eta: 0:07:52)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2791/5000 0.153s + 0.060s (eta: 0:07:51)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2801/5000 0.153s + 0.060s (eta: 0:07:48)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2811/5000 0.152s + 0.060s (eta: 0:07:45)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2821/5000 0.152s + 0.060s (eta: 0:07:43)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2831/5000 0.152s + 0.060s (eta: 0:07:40)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2841/5000 0.152s + 0.060s (eta: 0:07:38)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2851/5000 0.152s + 0.061s (eta: 0:07:36)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2861/5000 0.151s + 0.060s (eta: 0:07:32)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2871/5000 0.151s + 0.060s (eta: 0:07:30)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2881/5000 0.151s + 0.060s (eta: 0:07:27)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2891/5000 0.151s + 0.060s (eta: 0:07:24)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2901/5000 0.151s + 0.060s (eta: 0:07:21)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2911/5000 0.151s + 0.060s (eta: 0:07:19)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2921/5000 0.151s + 0.060s (eta: 0:07:17)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2931/5000 0.150s + 0.060s (eta: 0:07:14)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2941/5000 0.150s + 0.060s (eta: 0:07:11)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2951/5000 0.150s + 0.059s (eta: 0:07:09)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2961/5000 0.150s + 0.059s (eta: 0:07:05)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2971/5000 0.150s + 0.059s (eta: 0:07:02)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2981/5000 0.149s + 0.059s (eta: 0:07:00)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 2991/5000 0.149s + 0.059s (eta: 0:06:59)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3001/5000 0.149s + 0.059s (eta: 0:06:56)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3011/5000 0.149s + 0.060s (eta: 0:06:55)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3021/5000 0.149s + 0.060s (eta: 0:06:52)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3031/5000 0.149s + 0.060s (eta: 0:06:50)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3041/5000 0.149s + 0.060s (eta: 0:06:48)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3051/5000 0.149s + 0.060s (eta: 0:06:45)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3061/5000 0.148s + 0.059s (eta: 0:06:42)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3071/5000 0.148s + 0.059s (eta: 0:06:40)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3081/5000 0.148s + 0.059s (eta: 0:06:38)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3091/5000 0.148s + 0.059s (eta: 0:06:35)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3101/5000 0.148s + 0.059s (eta: 0:06:33)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3111/5000 0.148s + 0.059s (eta: 0:06:31)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3121/5000 0.148s + 0.060s (eta: 0:06:29)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3131/5000 0.148s + 0.060s (eta: 0:06:27)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3141/5000 0.148s + 0.060s (eta: 0:06:25)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3151/5000 0.147s + 0.060s (eta: 0:06:23)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3161/5000 0.147s + 0.060s (eta: 0:06:21)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3171/5000 0.147s + 0.060s (eta: 0:06:18)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3181/5000 0.147s + 0.060s (eta: 0:06:16)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3191/5000 0.147s + 0.060s (eta: 0:06:14)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3201/5000 0.147s + 0.060s (eta: 0:06:12)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3211/5000 0.147s + 0.060s (eta: 0:06:10)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3221/5000 0.147s + 0.060s (eta: 0:06:08)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3231/5000 0.147s + 0.060s (eta: 0:06:06)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3241/5000 0.147s + 0.060s (eta: 0:06:04)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3251/5000 0.147s + 0.060s (eta: 0:06:01)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3261/5000 0.147s + 0.060s (eta: 0:05:59)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3271/5000 0.147s + 0.060s (eta: 0:05:57)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3281/5000 0.147s + 0.060s (eta: 0:05:56)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3291/5000 0.147s + 0.060s (eta: 0:05:53)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3301/5000 0.147s + 0.060s (eta: 0:05:51)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3311/5000 0.147s + 0.060s (eta: 0:05:49)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3321/5000 0.147s + 0.060s (eta: 0:05:47)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3331/5000 0.147s + 0.060s (eta: 0:05:44)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3341/5000 0.147s + 0.060s (eta: 0:05:42)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3351/5000 0.147s + 0.060s (eta: 0:05:40)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3361/5000 0.146s + 0.060s (eta: 0:05:38)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3371/5000 0.147s + 0.060s (eta: 0:05:36)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3381/5000 0.146s + 0.060s (eta: 0:05:34)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3391/5000 0.146s + 0.060s (eta: 0:05:32)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3401/5000 0.146s + 0.060s (eta: 0:05:30)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3411/5000 0.146s + 0.060s (eta: 0:05:27)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3421/5000 0.146s + 0.060s (eta: 0:05:25)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3431/5000 0.146s + 0.060s (eta: 0:05:23)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3441/5000 0.146s + 0.060s (eta: 0:05:21)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3451/5000 0.146s + 0.060s (eta: 0:05:19)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3461/5000 0.146s + 0.060s (eta: 0:05:17)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3471/5000 0.146s + 0.060s (eta: 0:05:15)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3481/5000 0.146s + 0.060s (eta: 0:05:12)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3491/5000 0.146s + 0.060s (eta: 0:05:10)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3501/5000 0.146s + 0.059s (eta: 0:05:08)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3511/5000 0.146s + 0.060s (eta: 0:05:06)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3521/5000 0.146s + 0.060s (eta: 0:05:04)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3531/5000 0.146s + 0.060s (eta: 0:05:01)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3541/5000 0.146s + 0.059s (eta: 0:04:59)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3551/5000 0.146s + 0.059s (eta: 0:04:57)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3561/5000 0.146s + 0.059s (eta: 0:04:55)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3571/5000 0.146s + 0.059s (eta: 0:04:53)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3581/5000 0.146s + 0.059s (eta: 0:04:51)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3591/5000 0.146s + 0.060s (eta: 0:04:49)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3601/5000 0.146s + 0.060s (eta: 0:04:47)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3611/5000 0.146s + 0.059s (eta: 0:04:44)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3621/5000 0.146s + 0.059s (eta: 0:04:42)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3631/5000 0.145s + 0.060s (eta: 0:04:40)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3641/5000 0.146s + 0.060s (eta: 0:04:38)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3651/5000 0.146s + 0.060s (eta: 0:04:36)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3661/5000 0.145s + 0.060s (eta: 0:04:34)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3671/5000 0.145s + 0.060s (eta: 0:04:32)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3681/5000 0.145s + 0.060s (eta: 0:04:30)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3691/5000 0.145s + 0.059s (eta: 0:04:28)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3701/5000 0.146s + 0.059s (eta: 0:04:26)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3711/5000 0.145s + 0.059s (eta: 0:04:24)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3721/5000 0.145s + 0.059s (eta: 0:04:21)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3731/5000 0.145s + 0.059s (eta: 0:04:19)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3741/5000 0.145s + 0.059s (eta: 0:04:17)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3751/5000 0.145s + 0.059s (eta: 0:04:15)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3761/5000 0.145s + 0.059s (eta: 0:04:13)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3771/5000 0.145s + 0.059s (eta: 0:04:11)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3781/5000 0.145s + 0.059s (eta: 0:04:09)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3791/5000 0.145s + 0.059s (eta: 0:04:07)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3801/5000 0.145s + 0.059s (eta: 0:04:05)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3811/5000 0.145s + 0.059s (eta: 0:04:02)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3821/5000 0.145s + 0.059s (eta: 0:04:00)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3831/5000 0.145s + 0.059s (eta: 0:03:58)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3841/5000 0.145s + 0.059s (eta: 0:03:56)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3851/5000 0.145s + 0.059s (eta: 0:03:54)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3861/5000 0.145s + 0.059s (eta: 0:03:52)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3871/5000 0.145s + 0.059s (eta: 0:03:50)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3881/5000 0.145s + 0.059s (eta: 0:03:48)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3891/5000 0.145s + 0.059s (eta: 0:03:46)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3901/5000 0.145s + 0.059s (eta: 0:03:44)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3911/5000 0.145s + 0.059s (eta: 0:03:42)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3921/5000 0.145s + 0.059s (eta: 0:03:40)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3931/5000 0.145s + 0.059s (eta: 0:03:38)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3941/5000 0.145s + 0.059s (eta: 0:03:35)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3951/5000 0.145s + 0.059s (eta: 0:03:33)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3961/5000 0.145s + 0.059s (eta: 0:03:31)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3971/5000 0.145s + 0.059s (eta: 0:03:29)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3981/5000 0.145s + 0.059s (eta: 0:03:27)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 3991/5000 0.145s + 0.059s (eta: 0:03:25)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4001/5000 0.145s + 0.059s (eta: 0:03:23)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4011/5000 0.145s + 0.059s (eta: 0:03:21)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4021/5000 0.145s + 0.059s (eta: 0:03:19)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4031/5000 0.145s + 0.059s (eta: 0:03:17)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4041/5000 0.145s + 0.059s (eta: 0:03:15)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4051/5000 0.145s + 0.059s (eta: 0:03:13)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4061/5000 0.145s + 0.059s (eta: 0:03:11)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4071/5000 0.145s + 0.059s (eta: 0:03:09)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4081/5000 0.145s + 0.059s (eta: 0:03:07)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4091/5000 0.145s + 0.059s (eta: 0:03:05)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4101/5000 0.145s + 0.059s (eta: 0:03:03)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4111/5000 0.145s + 0.059s (eta: 0:03:01)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4121/5000 0.145s + 0.059s (eta: 0:02:59)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4131/5000 0.145s + 0.059s (eta: 0:02:57)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4141/5000 0.145s + 0.059s (eta: 0:02:55)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4151/5000 0.145s + 0.059s (eta: 0:02:53)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4161/5000 0.145s + 0.059s (eta: 0:02:51)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4171/5000 0.145s + 0.060s (eta: 0:02:49)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4181/5000 0.145s + 0.059s (eta: 0:02:47)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4191/5000 0.145s + 0.059s (eta: 0:02:45)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4201/5000 0.145s + 0.059s (eta: 0:02:43)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4211/5000 0.145s + 0.059s (eta: 0:02:41)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4221/5000 0.145s + 0.059s (eta: 0:02:38)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4231/5000 0.145s + 0.059s (eta: 0:02:36)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4241/5000 0.145s + 0.059s (eta: 0:02:34)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4251/5000 0.145s + 0.059s (eta: 0:02:32)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4261/5000 0.145s + 0.059s (eta: 0:02:30)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4271/5000 0.145s + 0.059s (eta: 0:02:28)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4281/5000 0.145s + 0.059s (eta: 0:02:26)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4291/5000 0.145s + 0.060s (eta: 0:02:24)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4301/5000 0.145s + 0.059s (eta: 0:02:22)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4311/5000 0.145s + 0.059s (eta: 0:02:20)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4321/5000 0.145s + 0.059s (eta: 0:02:18)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4331/5000 0.145s + 0.059s (eta: 0:02:16)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4341/5000 0.145s + 0.059s (eta: 0:02:14)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4351/5000 0.145s + 0.059s (eta: 0:02:12)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4361/5000 0.145s + 0.059s (eta: 0:02:10)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4371/5000 0.145s + 0.059s (eta: 0:02:08)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4381/5000 0.144s + 0.059s (eta: 0:02:06)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4391/5000 0.145s + 0.059s (eta: 0:02:04)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4401/5000 0.145s + 0.059s (eta: 0:02:02)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4411/5000 0.145s + 0.059s (eta: 0:01:59)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4421/5000 0.145s + 0.059s (eta: 0:01:57)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4431/5000 0.145s + 0.059s (eta: 0:01:55)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4441/5000 0.144s + 0.059s (eta: 0:01:53)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4451/5000 0.144s + 0.059s (eta: 0:01:51)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4461/5000 0.144s + 0.059s (eta: 0:01:49)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4471/5000 0.144s + 0.059s (eta: 0:01:47)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4481/5000 0.144s + 0.059s (eta: 0:01:45)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4491/5000 0.144s + 0.059s (eta: 0:01:43)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4501/5000 0.144s + 0.059s (eta: 0:01:41)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4511/5000 0.144s + 0.059s (eta: 0:01:39)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4521/5000 0.144s + 0.059s (eta: 0:01:37)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4531/5000 0.144s + 0.059s (eta: 0:01:35)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4541/5000 0.144s + 0.059s (eta: 0:01:33)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4551/5000 0.144s + 0.059s (eta: 0:01:31)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4561/5000 0.144s + 0.059s (eta: 0:01:29)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4571/5000 0.144s + 0.059s (eta: 0:01:27)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4581/5000 0.144s + 0.059s (eta: 0:01:25)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4591/5000 0.144s + 0.059s (eta: 0:01:23)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4601/5000 0.144s + 0.059s (eta: 0:01:21)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4611/5000 0.144s + 0.060s (eta: 0:01:19)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4621/5000 0.144s + 0.060s (eta: 0:01:17)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4631/5000 0.144s + 0.060s (eta: 0:01:15)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4641/5000 0.144s + 0.060s (eta: 0:01:13)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4651/5000 0.144s + 0.060s (eta: 0:01:11)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4661/5000 0.144s + 0.060s (eta: 0:01:09)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4671/5000 0.144s + 0.060s (eta: 0:01:07)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4681/5000 0.144s + 0.059s (eta: 0:01:05)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4691/5000 0.144s + 0.059s (eta: 0:01:02)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4701/5000 0.144s + 0.060s (eta: 0:01:00)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4711/5000 0.144s + 0.059s (eta: 0:00:58)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4721/5000 0.144s + 0.060s (eta: 0:00:56)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4731/5000 0.144s + 0.060s (eta: 0:00:54)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4741/5000 0.144s + 0.060s (eta: 0:00:52)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4751/5000 0.144s + 0.060s (eta: 0:00:50)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4761/5000 0.144s + 0.060s (eta: 0:00:48)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4771/5000 0.144s + 0.060s (eta: 0:00:46)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4781/5000 0.144s + 0.060s (eta: 0:00:44)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4791/5000 0.144s + 0.060s (eta: 0:00:42)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4801/5000 0.144s + 0.060s (eta: 0:00:40)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4811/5000 0.144s + 0.060s (eta: 0:00:38)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4821/5000 0.144s + 0.060s (eta: 0:00:36)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4831/5000 0.144s + 0.060s (eta: 0:00:34)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4841/5000 0.144s + 0.060s (eta: 0:00:32)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4851/5000 0.144s + 0.060s (eta: 0:00:30)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4861/5000 0.144s + 0.060s (eta: 0:00:28)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4871/5000 0.144s + 0.059s (eta: 0:00:26)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4881/5000 0.144s + 0.059s (eta: 0:00:24)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4891/5000 0.144s + 0.059s (eta: 0:00:22)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4901/5000 0.144s + 0.059s (eta: 0:00:20)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4911/5000 0.144s + 0.059s (eta: 0:00:18)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4921/5000 0.144s + 0.059s (eta: 0:00:16)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4931/5000 0.144s + 0.059s (eta: 0:00:14)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4941/5000 0.144s + 0.059s (eta: 0:00:12)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4951/5000 0.144s + 0.059s (eta: 0:00:09)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4961/5000 0.144s + 0.059s (eta: 0:00:07)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4971/5000 0.144s + 0.059s (eta: 0:00:05)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4981/5000 0.144s + 0.059s (eta: 0:00:03)
INFO test_engine.py: 289: im_detect: range [2501, 5000] of 5000: 4991/5000 0.144s + 0.059s (eta: 0:00:01)
INFO test_engine.py: 322: Wrote detections to: /home/wattanapongsu/library/detectron/test/coco_2014_minival/generalized_rcnn/detection_range_2500_5000.pkl

INFO test_engine.py: 215: Wrote detections to: /home/wattanapongsu/library/detectron/test/coco_2014_minival/generalized_rcnn/detections.pkl
INFO test_engine.py: 164: Total inference time: 584.342s
INFO task_evaluation.py:  76: Evaluating detections
INFO json_dataset_evaluator.py: 162: Writing bbox results json to: /home/wattanapongsu/library/detectron/test/coco_2014_minival/generalized_rcnn/bbox_coco_2014_minival_results.json
Loading and preparing results...
DONE (t=2.43s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=46.80s).
Accumulating evaluation results...
DONE (t=6.05s).
INFO json_dataset_evaluator.py: 222: ~~~~ Mean and per-category AP @ IoU=[0.50,0.95] ~~~~
INFO json_dataset_evaluator.py: 223: 30.7
INFO json_dataset_evaluator.py: 231: 45.7
INFO json_dataset_evaluator.py: 231: 22.1
INFO json_dataset_evaluator.py: 231: 33.8
INFO json_dataset_evaluator.py: 231: 31.0
INFO json_dataset_evaluator.py: 231: 50.6
INFO json_dataset_evaluator.py: 231: 53.1
INFO json_dataset_evaluator.py: 231: 49.4
INFO json_dataset_evaluator.py: 231: 21.9
INFO json_dataset_evaluator.py: 231: 18.5
INFO json_dataset_evaluator.py: 231: 21.7
INFO json_dataset_evaluator.py: 231: 57.3
INFO json_dataset_evaluator.py: 231: 55.8
INFO json_dataset_evaluator.py: 231: 41.2
INFO json_dataset_evaluator.py: 231: 15.9
INFO json_dataset_evaluator.py: 231: 27.0
INFO json_dataset_evaluator.py: 231: 54.3
INFO json_dataset_evaluator.py: 231: 50.2
INFO json_dataset_evaluator.py: 231: 45.1
INFO json_dataset_evaluator.py: 231: 40.7
INFO json_dataset_evaluator.py: 231: 42.9
INFO json_dataset_evaluator.py: 231: 51.8
INFO json_dataset_evaluator.py: 231: 62.6
INFO json_dataset_evaluator.py: 231: 56.6
INFO json_dataset_evaluator.py: 231: 58.5
INFO json_dataset_evaluator.py: 231: 6.8
INFO json_dataset_evaluator.py: 231: 25.7
INFO json_dataset_evaluator.py: 231: 7.1
INFO json_dataset_evaluator.py: 231: 23.4
INFO json_dataset_evaluator.py: 231: 18.3
INFO json_dataset_evaluator.py: 231: 53.1
INFO json_dataset_evaluator.py: 231: 12.2
INFO json_dataset_evaluator.py: 231: 19.1
INFO json_dataset_evaluator.py: 231: 43.4
INFO json_dataset_evaluator.py: 231: 31.9
INFO json_dataset_evaluator.py: 231: 16.3
INFO json_dataset_evaluator.py: 231: 27.5
INFO json_dataset_evaluator.py: 231: 35.8
INFO json_dataset_evaluator.py: 231: 23.2
INFO json_dataset_evaluator.py: 231: 37.5
INFO json_dataset_evaluator.py: 231: 30.6
INFO json_dataset_evaluator.py: 231: 24.3
INFO json_dataset_evaluator.py: 231: 31.9
INFO json_dataset_evaluator.py: 231: 15.3
INFO json_dataset_evaluator.py: 231: 9.1
INFO json_dataset_evaluator.py: 231: 6.5
INFO json_dataset_evaluator.py: 231: 32.7
INFO json_dataset_evaluator.py: 231: 16.3
INFO json_dataset_evaluator.py: 231: 13.7
INFO json_dataset_evaluator.py: 231: 26.0
INFO json_dataset_evaluator.py: 231: 24.0
INFO json_dataset_evaluator.py: 231: 18.2
INFO json_dataset_evaluator.py: 231: 15.3
INFO json_dataset_evaluator.py: 231: 23.4
INFO json_dataset_evaluator.py: 231: 42.5
INFO json_dataset_evaluator.py: 231: 34.7
INFO json_dataset_evaluator.py: 231: 23.4
INFO json_dataset_evaluator.py: 231: 17.1
INFO json_dataset_evaluator.py: 231: 27.8
INFO json_dataset_evaluator.py: 231: 17.6
INFO json_dataset_evaluator.py: 231: 28.3
INFO json_dataset_evaluator.py: 231: 18.5
INFO json_dataset_evaluator.py: 231: 48.6
INFO json_dataset_evaluator.py: 231: 46.2
INFO json_dataset_evaluator.py: 231: 45.1
INFO json_dataset_evaluator.py: 231: 50.5
INFO json_dataset_evaluator.py: 231: 19.1
INFO json_dataset_evaluator.py: 231: 38.2
INFO json_dataset_evaluator.py: 231: 27.6
INFO json_dataset_evaluator.py: 231: 42.5
INFO json_dataset_evaluator.py: 231: 21.4
INFO json_dataset_evaluator.py: 231: 16.3
INFO json_dataset_evaluator.py: 231: 27.5
INFO json_dataset_evaluator.py: 231: 37.9
INFO json_dataset_evaluator.py: 231: 9.5
INFO json_dataset_evaluator.py: 231: 46.8
INFO json_dataset_evaluator.py: 231: 27.5
INFO json_dataset_evaluator.py: 231: 18.6
INFO json_dataset_evaluator.py: 231: 35.5
INFO json_dataset_evaluator.py: 231: 0.5
INFO json_dataset_evaluator.py: 231: 7.7
INFO json_dataset_evaluator.py: 232: ~~~~ Summary metrics ~~~~
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.307
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.525
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.318
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.167
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.340
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.407
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.270
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.434
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.458
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.266
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.503
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.592
INFO json_dataset_evaluator.py: 199: Wrote json eval results to: ./test/coco_2014_minival/generalized_rcnn/detection_results.pkl
INFO task_evaluation.py:  62: Evaluating bounding boxes is done!
INFO task_evaluation.py: 105: Evaluating segmentations
INFO json_dataset_evaluator.py:  83: Writing segmentation results json to: /home/wattanapongsu/library/detectron/test/coco_2014_minival/generalized_rcnn/segmentations_coco_2014_minival_results.json
Loading and preparing results...
DONE (t=8.98s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *segm*
DONE (t=56.05s).
Accumulating evaluation results...
DONE (t=6.46s).
INFO json_dataset_evaluator.py: 222: ~~~~ Mean and per-category AP @ IoU=[0.50,0.95] ~~~~
INFO json_dataset_evaluator.py: 223: 27.6
INFO json_dataset_evaluator.py: 231: 36.7
INFO json_dataset_evaluator.py: 231: 11.3
INFO json_dataset_evaluator.py: 231: 29.6
INFO json_dataset_evaluator.py: 231: 22.4
INFO json_dataset_evaluator.py: 231: 37.0
INFO json_dataset_evaluator.py: 231: 53.0
INFO json_dataset_evaluator.py: 231: 52.1
INFO json_dataset_evaluator.py: 231: 22.0
INFO json_dataset_evaluator.py: 231: 15.9
INFO json_dataset_evaluator.py: 231: 19.6
INFO json_dataset_evaluator.py: 231: 53.7
INFO json_dataset_evaluator.py: 231: 56.7
INFO json_dataset_evaluator.py: 231: 42.4
INFO json_dataset_evaluator.py: 231: 10.2
INFO json_dataset_evaluator.py: 231: 22.4
INFO json_dataset_evaluator.py: 231: 59.7
INFO json_dataset_evaluator.py: 231: 50.7
INFO json_dataset_evaluator.py: 231: 31.0
INFO json_dataset_evaluator.py: 231: 33.3
INFO json_dataset_evaluator.py: 231: 35.7
INFO json_dataset_evaluator.py: 231: 44.6
INFO json_dataset_evaluator.py: 231: 64.3
INFO json_dataset_evaluator.py: 231: 45.7
INFO json_dataset_evaluator.py: 231: 40.5
INFO json_dataset_evaluator.py: 231: 7.3
INFO json_dataset_evaluator.py: 231: 32.6
INFO json_dataset_evaluator.py: 231: 8.1
INFO json_dataset_evaluator.py: 231: 20.7
INFO json_dataset_evaluator.py: 231: 20.0
INFO json_dataset_evaluator.py: 231: 51.3
INFO json_dataset_evaluator.py: 231: 0.3
INFO json_dataset_evaluator.py: 231: 11.5
INFO json_dataset_evaluator.py: 231: 38.8
INFO json_dataset_evaluator.py: 231: 20.0
INFO json_dataset_evaluator.py: 231: 11.8
INFO json_dataset_evaluator.py: 231: 28.4
INFO json_dataset_evaluator.py: 231: 17.6
INFO json_dataset_evaluator.py: 231: 17.9
INFO json_dataset_evaluator.py: 231: 44.0
INFO json_dataset_evaluator.py: 231: 27.9
INFO json_dataset_evaluator.py: 231: 20.2
INFO json_dataset_evaluator.py: 231: 32.6
INFO json_dataset_evaluator.py: 231: 4.0
INFO json_dataset_evaluator.py: 231: 5.2
INFO json_dataset_evaluator.py: 231: 3.2
INFO json_dataset_evaluator.py: 231: 31.0
INFO json_dataset_evaluator.py: 231: 11.7
INFO json_dataset_evaluator.py: 231: 13.4
INFO json_dataset_evaluator.py: 231: 28.4
INFO json_dataset_evaluator.py: 231: 24.2
INFO json_dataset_evaluator.py: 231: 17.1
INFO json_dataset_evaluator.py: 231: 12.6
INFO json_dataset_evaluator.py: 231: 18.7
INFO json_dataset_evaluator.py: 231: 43.3
INFO json_dataset_evaluator.py: 231: 35.6
INFO json_dataset_evaluator.py: 231: 24.3
INFO json_dataset_evaluator.py: 231: 10.3
INFO json_dataset_evaluator.py: 231: 24.0
INFO json_dataset_evaluator.py: 231: 14.5
INFO json_dataset_evaluator.py: 231: 23.5
INFO json_dataset_evaluator.py: 231: 8.5
INFO json_dataset_evaluator.py: 231: 51.5
INFO json_dataset_evaluator.py: 231: 47.9
INFO json_dataset_evaluator.py: 231: 48.3
INFO json_dataset_evaluator.py: 231: 51.2
INFO json_dataset_evaluator.py: 231: 18.3
INFO json_dataset_evaluator.py: 231: 39.4
INFO json_dataset_evaluator.py: 231: 25.1
INFO json_dataset_evaluator.py: 231: 41.9
INFO json_dataset_evaluator.py: 231: 20.1
INFO json_dataset_evaluator.py: 231: 18.4
INFO json_dataset_evaluator.py: 231: 26.3
INFO json_dataset_evaluator.py: 231: 39.5
INFO json_dataset_evaluator.py: 231: 5.2
INFO json_dataset_evaluator.py: 231: 46.6
INFO json_dataset_evaluator.py: 231: 27.9
INFO json_dataset_evaluator.py: 231: 11.1
INFO json_dataset_evaluator.py: 231: 33.7
INFO json_dataset_evaluator.py: 231: 0.6
INFO json_dataset_evaluator.py: 231: 3.6
INFO json_dataset_evaluator.py: 232: ~~~~ Summary metrics ~~~~
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.276
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.486
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.283
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.115
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.302
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.419
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.253
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.390
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.409
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.212
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.455
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.561
INFO json_dataset_evaluator.py: 122: Wrote json eval results to: ./test/coco_2014_minival/generalized_rcnn/segmentation_results.pkl
INFO task_evaluation.py:  66: Evaluating segmentations is done!
INFO test_engine.py: 130: Check expected results
INFO test_engine.py: 136: Completed check expected results
INFO task_evaluation.py: 181: copypaste: Dataset: coco_2014_minival
INFO task_evaluation.py: 183: copypaste: Task: box
INFO task_evaluation.py: 186: copypaste: AP,AP50,AP75,APs,APm,APl
INFO task_evaluation.py: 187: copypaste: 0.3066,0.5248,0.3178,0.1668,0.3402,0.4067
INFO task_evaluation.py: 183: copypaste: Task: mask
INFO task_evaluation.py: 186: copypaste: AP,AP50,AP75,APs,APm,APl
INFO task_evaluation.py: 187: copypaste: 0.2764,0.4858,0.2828,0.1148,0.3017,0.4190
